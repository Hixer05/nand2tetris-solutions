// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // MEMO
    // ALU2R = Alu 2 register

    // Put your code here:
    // Register A
    Not(in=instruction[15],out=Ains);
    Mux16(a=ALU2R,b=instruction, sel=Ains, out=Ain);
    Or(a=Ains, b=instruction[5], out=Aload);
    ARegister(in=Ain,load=Aload,out=Aout,out[0..14]=addressM);
    // Weather A or M
    And(a=instruction[15], b=instruction[12], out=AM);
    Mux16(a=Aout, b=inM, sel=AM, out=A2ALU);
    // ALU
    ALU(x=D2ALU, y=A2ALU, zx=instruction[11], nx = instruction[10],
        zy=instruction[9], ny=instruction[8], f=instruction[7],
        no=instruction[6], ng=ng, zr=zr, out=outM, out= ALU2R);

    // Register D
    And(a=instruction[4],b=instruction[15],out=Dload);
    DRegister(in=ALU2R, load=Dload, out=D2ALU);

    // WriteM
    And(a=instruction[15], b=instruction[3], out=writeM);

    // PC
    // instr 0..2; instr 15; ng ; zr

    Not(in=ng, out=nng);
    Not(in=zr, out=nzr);
    And(a=instruction[15], b=instruction[0], out=jgt);
    And(a=nng,b=nzr,out=pos);
    And(a=jgt, b=pos, out=cas1);

    And(a=instruction[15],b=instruction[1],out=jeq);
    And(a=jeq, b=zr,out=cas2);

    And(a=instruction[15],b=instruction[2], out=jlt);
    And(a=jlt,b=ng,out=cas3);

    Or(a=cas1,b=cas2,out=tmp);
    Or(a=cas3,b=tmp,out=jump);

    PC(in=Aout, load=jump, reset=reset, inc=true, out[0..14]=pc);

}
